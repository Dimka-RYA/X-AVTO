import React, { useEffect, useMemo, useCallback } from 'react';
import { PortsTableProps } from '../types';
import { ResizeableHeader } from './ResizeableHeader';
import { getAddressDetails, clearAddressCache } from '../utils/addressFormatter';
import '../Ports.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Ä—Ç–æ–≤
 */
export const PortsTable: React.FC<PortsTableProps> = ({
  ports,
  searchTerm,
  closingPorts,
  onClosePort,
  columnWidths,
  handleColumnResize
}) => {
  // –û—á–∏—â–∞–µ–º –∫—ç—à –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    clearAddressCache();
    return () => {
      clearAddressCache();
    };
  }, []);
  
  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const filteredPorts = useMemo(() => {
    if (!searchTerm || !searchTerm.trim()) return ports;
    
    const normalizedSearch = searchTerm.toLowerCase().trim();
    return ports.filter(port => 
      Object.values(port).some(value => 
        value.toLowerCase().includes(normalizedSearch)
      )
    );
  }, [ports, searchTerm]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
  const renderAddress = useCallback((address: string | null | undefined): string => {
    if (address === null || address === undefined || address === '') {
      return '0.0.0.0:0';
    }
    return address;
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É–ª—Ç–∏–ø–æ–≤
  const getAddressTooltip = useCallback((address: string | null | undefined): string => {
    if (address === null || address === undefined || address === '') {
      return "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω";
    }
    
    try {
      return getAddressDetails(address);
    } catch (error) {
      return `–ê–¥—Ä–µ—Å: ${address}`;
    }
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ—Ä—Ç–∞
  const getStateDetails = useCallback((state: string | undefined, protocol: string): string => {
    if (protocol === "UDP") {
      return "UDP - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–µ–π—Ç–∞–≥—Ä–∞–º–º–∞)";
    }
    
    if (!state) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ";
    
    switch (state) {
      case "LISTENING":
      case "LISTEN":
        return "–°–ª—É—à–∞—é—â–∏–π –ø–æ—Ä—Ç - –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π";
      case "ESTABLISHED":
        return "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ö–æ—Å—Ç–∞–º–∏";
      case "TIME_WAIT":
        return "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞–∫–µ—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º";
      case "CLOSE_WAIT":
        return "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º";
      case "FIN_WAIT_1":
      case "FIN_WAIT_2":
        return "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫—Ä—ã—Ç–∏—è";
      case "LAST_ACK":
        return "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ";
      case "SYN_SENT":
        return "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è";
      case "SYN_RECEIVED":
      case "SYN_RECV":
        return "–ü–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è";
      case "CLOSING":
        return "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è";
      default:
        return `–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}`;
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ
  const getProcessDetails = useCallback((pid: string, name: string, path: string): string => {
    if (pid === "0" || pid === "4" || name.toLowerCase().includes("system")) {
      return "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å Windows";
    }
    
    let details = `–ü—Ä–æ—Ü–µ—Å—Å: ${name}\nPID: ${pid}`;
    
    if (path && path.trim() !== '') {
      details += `\n–ü—É—Ç—å: ${path}`;
    }
    
    return details;
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
  const getFullAddress = useCallback((address: string): string => {
    return address || '';
  }, []);

  return (
    <div className="table-responsive">
      <table className="ports-table">
        <thead>
          <tr>
            <ResizeableHeader width={columnWidths.protocol} onResize={(w) => handleColumnResize('protocol', w)}>
              –ü—Ä–æ—Ç–æ–∫–æ–ª
            </ResizeableHeader>
            <ResizeableHeader width={columnWidths.local_addr} onResize={(w) => handleColumnResize('local_addr', w)}>
              –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
            </ResizeableHeader>
            <ResizeableHeader width={columnWidths.foreign_addr} onResize={(w) => handleColumnResize('foreign_addr', w)}>
              –í–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å
            </ResizeableHeader>
            <ResizeableHeader width={columnWidths.state} onResize={(w) => handleColumnResize('state', w)}>
              –°–æ—Å—Ç–æ—è–Ω–∏–µ
            </ResizeableHeader>
            <ResizeableHeader width={columnWidths.pid} onResize={(w) => handleColumnResize('pid', w)}>
              PID
            </ResizeableHeader>
            <ResizeableHeader width={columnWidths.name} onResize={(w) => handleColumnResize('name', w)}>
              –ü—Ä–æ—Ü–µ—Å—Å
            </ResizeableHeader>
            <ResizeableHeader width={columnWidths.action} onResize={(w) => handleColumnResize('action', w)}>
              –î–µ–π—Å—Ç–≤–∏–µ
            </ResizeableHeader>
          </tr>
        </thead>
        <tbody>
          {filteredPorts.length > 0 ? (
            filteredPorts.map((port, index) => (
              <tr key={`${port.pid}-${port.local_addr}-${index}`}>
                <td 
                  style={{ width: `${columnWidths.protocol}px` }}
                  title={`${port.protocol} - ${port.protocol === 'TCP' ? 'Transmission Control Protocol' : port.protocol === 'UDP' ? 'User Datagram Protocol' : port.protocol}`}
                  className="protocol-cell"
                  data-protocol={port.protocol}
                >
                  {port.protocol}
                </td>
                <td 
                  style={{ width: `${columnWidths.local_addr}px` }} 
                  title={getAddressTooltip(port.local_addr)}
                  className="address-cell"
                  data-raw-addr={port.local_addr}
                  data-is-ipv6={port.local_addr?.includes('[')}
                  data-full-addr={getFullAddress(port.local_addr)}
                  data-udp={port.protocol === "UDP" ? "true" : undefined}
                >
                  {renderAddress(port.local_addr)}
                </td>
                <td 
                  style={{ width: `${columnWidths.foreign_addr}px` }} 
                  title={getAddressTooltip(port.foreign_addr)}
                  className="address-cell"
                  data-raw-addr={port.foreign_addr}
                  data-is-ipv6={port.foreign_addr?.includes('[')}
                  data-full-addr={getFullAddress(port.foreign_addr)}
                  data-udp={port.protocol === "UDP" ? "true" : undefined}
                >
                  {renderAddress(port.foreign_addr)}
                </td>
                <td 
                  style={{ width: `${columnWidths.state}px` }}
                  title={getStateDetails(port.state, port.protocol)}
                  className="state-cell"
                  data-state={port.state?.toUpperCase() || (port.protocol === "UDP" ? "DATAGRAM" : "")}
                  data-protocol={port.protocol}
                >
                  {port.state || (port.protocol === "UDP" ? "DATAGRAM" : "-")}
                </td>
                <td 
                  style={{ width: `${columnWidths.pid}px` }}
                  title={`–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞: ${port.pid}`}
                  className="pid-cell"
                >
                  {port.pid}
                </td>
                <td 
                  style={{ width: `${columnWidths.name}px` }} 
                  title={getProcessDetails(port.pid, port.name, port.path)}
                  className="process-name-cell"
                  data-has-path={port.path && port.path.trim() !== '' ? "true" : "false"}
                >
                  {port.name}
                  {port.path && port.path.trim() !== '' && <span className="path-indicator">üìÇ</span>}
                </td>
                <td style={{ width: `${columnWidths.action}px` }}>
                  <button 
                    className="action-button"
                    onClick={() => {
                      if (port.pid === "0" || port.pid === "4" || port.name.toLowerCase().includes("system")) {
                        const confirmed = window.confirm(
                          `–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å ${port.name} (PID: ${port.pid}).\n\n` +
                          `–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`
                        );
                        if (!confirmed) return;
                      }
                      onClosePort(port.pid);
                    }}
                    disabled={closingPorts.has(port.pid)}
                    title={
                      closingPorts.has(port.pid) 
                        ? `–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${port.name}...` 
                        : `–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${port.name} (PID: ${port.pid})`
                    }
                  >
                    {closingPorts.has(port.pid) ? '–ó–∞–∫—Ä—ã—Ç–∏–µ...' : '–ó–∞–∫—Ä—ã—Ç—å'}
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan={7} className="no-results">
                {searchTerm ? '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É' : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ä—Ç–∞—Ö'}
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
}; 