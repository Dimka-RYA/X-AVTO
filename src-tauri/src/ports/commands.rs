use std::process::Command;
use tauri::{Emitter, Manager, Runtime, State};
use tokio::task;
use std::thread;

use crate::ports::types::{Port, PortsCache};
use crate::ports::core::get_ports_internal;

/// Get the list of network ports and the processes that own them

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤
#[tauri::command]
pub async fn get_network_ports(
    ports_cache: State<'_, PortsCache>,
    force_update: Option<bool>
) -> Result<Vec<Port>, String> {
    println!("[Ports] –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ä—Ç–∞—Ö –∏–∑ –∫—ç—à–∞, force_update: {:?}", force_update);
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    if force_update.unwrap_or(false) {
        println!("[Ports] –ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö");
        let mut process_cache = std::collections::HashMap::new();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        println!("[Ports] –í—ã–∑—ã–≤–∞–µ–º get_ports_internal –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        
        match get_ports_internal(&mut process_cache, true) {
            Ok(ports) => {
                println!("[Ports] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ {} –ø–æ—Ä—Ç–æ–≤", ports.len());
                if ports.len() > 0 {
                    println!("[Ports] –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤:");
                    let max_logs = std::cmp::min(ports.len(), 3);
                    for (i, port) in ports.iter().take(max_logs).enumerate() {
                        println!("[Ports] –ü—Ä–∏–º–µ—Ä –ø–æ—Ä—Ç–∞ {}: {} - {} -> {} PID: {}, –ò–º—è: {}", 
                                i, port.protocol, port.local_addr, port.foreign_addr, port.pid, port.name);
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                match ports_cache.0.lock() {
                    Ok(mut cache_guard) => {
                        println!("[Ports] –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Ä—Ç–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {} -> {}", 
                                cache_guard.len(), ports.len());
                        *cache_guard = ports.clone();
                        println!("[Ports] –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ");
                        return Ok(ports);
                    },
                    Err(e) => {
                        println!("[Ports] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {}", e);
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
                        return Ok(ports);
                    }
                }
            },
            Err(e) => {
                println!("[Ports] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {}", e);
                return Err(format!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {}", e));
            }
        }
    }
    
    // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
    println!("[Ports] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –ø–æ—Ä—Ç–æ–≤");
    
    let cache_result = ports_cache.0.lock();
    match cache_result {
        Ok(ports) => {
            let ports_count = ports.len();
            println!("[Ports] –ü–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫—ç—à–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç {} –ø–æ—Ä—Ç–æ–≤", ports_count);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—á–µ–º—É –∫—ç—à –ø—É—Å—Ç
            if ports_count == 0 {
                // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—ç—à–∞ –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
                println!("[Ports] –û–¢–õ–ê–î–ö–ê: –ö—ç—à –ø—É—Å—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é...");
                
                // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                let mut process_cache = std::collections::HashMap::new();
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
                println!("[Ports] –í—ã–∑—ã–≤–∞–µ–º get_ports_internal –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∫—ç—à–∞");
                match crate::ports::core::get_ports_internal(&mut process_cache, true) {
                    Ok(direct_ports) => {
                        println!("[Ports] –û–¢–õ–ê–î–ö–ê: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª {} –ø–æ—Ä—Ç–æ–≤", direct_ports.len());
                        
                        // –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
                        if !direct_ports.is_empty() {
                            match ports_cache.0.lock() {
                                Ok(mut cache_guard) => {
                                    println!("[Ports] –û–¢–õ–ê–î–ö–ê: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤—Ä—É—á–Ω—É—é ({} -> {})", cache_guard.len(), direct_ports.len());
                                    *cache_guard = direct_ports.clone();
                                    println!("[Ports] –û–¢–õ–ê–î–ö–ê: –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {} –ø–æ—Ä—Ç–æ–≤", cache_guard.len());
                                    return Ok(direct_ports);
                                },
                                Err(e) => {
                                    println!("[Ports] –û–¢–õ–ê–î–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à: {}", e);
                                    return Ok(direct_ports);
                                }
                            }
                        } else {
                            println!("[Ports] –û–¢–õ–ê–î–ö–ê: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö");
                        }
                    },
                    Err(e) => {
                        println!("[Ports] –û–¢–õ–ê–î–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Ä—Ç–æ–≤: {}", e);
                        return Err(format!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—Ä–æ—Å–µ –ø–æ—Ä—Ç–æ–≤: {}", e));
                    }
                }
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if !ports.is_empty() {
                println!("[Ports] –ü—Ä–∏–º–µ—Ä—ã –ø–æ—Ä—Ç–æ–≤ –∏–∑ –∫—ç—à–∞:");
                let max_logs = std::cmp::min(ports.len(), 5);
                for (i, port) in ports.iter().take(max_logs).enumerate() {
                    println!("[Ports] –ü–æ—Ä—Ç {}: {} {}:{} -> {} ({}), –ò–º—è: {}",
                        i, port.protocol, port.local_addr, port.state, port.foreign_addr, port.pid, port.name);
                }
            } else {
                println!("[Ports] –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö—ç—à –ø—É—Å—Ç, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é");
            }
            
            println!("[Ports] –£—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {} –ø–æ—Ä—Ç–æ–≤ –∏–∑ –∫—ç—à–∞", ports.len());
            return Ok(ports.clone());
        },
        Err(e) => {
            println!("[Ports] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∫—ç—à–∞ –ø–æ—Ä—Ç–æ–≤: {}", e);
            
            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            println!("[Ports] –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç");
            let mut process_cache = std::collections::HashMap::new();
            
            match get_ports_internal(&mut process_cache, true) {
                Ok(direct_ports) => {
                    println!("[Ports] –†–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª {} –ø–æ—Ä—Ç–æ–≤", direct_ports.len());
                    return Ok(direct_ports);
                },
                Err(e) => {
                    println!("[Ports] –û–®–ò–ë–ö–ê: –†–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {}", e);
                    return Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∫—ç—à–∞ –ø–æ—Ä—Ç–æ–≤ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {}", e));
                }
            }
        }
    }
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞)
#[tauri::command]
pub async fn close_port<R: Runtime>(
    pid: String,
    app_handle: tauri::AppHandle<R>
) -> Result<String, String> {
    println!("[Ports] üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ —Å PID: {}", pid);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –º—ã –∑–∞–∫—Ä—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    if pid == "0" || pid == "4" {
        return Err("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å".to_string());
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    task::spawn_blocking(move || {
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        let process_name = if cfg!(target_os = "windows") {
            let output = Command::new("tasklist")
                .args(["/FI", &format!("PID eq {}", pid), "/FO", "CSV"])
                .output();
                
            if let Ok(output) = output {
                let output_str = String::from_utf8_lossy(&output.stdout);
                if let Some(line) = output_str.lines().skip(1).next() {
                    if let Some(index) = line.find(',') {
                        line[1..index-1].to_string()
                    } else {
                        "Unknown".to_string()
                    }
                } else {
                    "Unknown".to_string()
                }
            } else {
                "Unknown".to_string()
            }
        } else {
            let output = Command::new("ps")
                .args(["-p", &pid, "-o", "comm="])
                .output();
                
            if let Ok(output) = output {
                String::from_utf8_lossy(&output.stdout).trim().to_string()
            } else {
                "Unknown".to_string()
            }
        };
        
        println!("[Ports] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {} (PID: {})", process_name, pid);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –æ—Å–æ–±—ã–º (Steam, –∏–≥—Ä–∞ –∏ —Ç.–¥.)
        let is_special_process = process_name.to_lowercase().contains("steam") || 
                                process_name.to_lowercase().contains("game") || 
                                process_name.to_lowercase().contains("epic") || 
                                process_name.to_lowercase().contains("battle.net");
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–æ–±—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if is_special_process {
            println!("[Ports] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å ({}), –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞—Å–∫–∞–¥–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", process_name);
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
        
        // –£—Ä–æ–≤–µ–Ω—å 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        println!("[Ports] üîç –£—Ä–æ–≤–µ–Ω—å 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞");
        let standard_close = if cfg!(target_os = "windows") {
            Command::new("taskkill")
                .args(["/PID", &pid])
                .output()
        } else {
            Command::new("kill")
                .args([&pid])
                .output()
        };
        
        match standard_close {
            Ok(output) if output.status.success() => {
                println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º", pid);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω
                std::thread::sleep(std::time::Duration::from_millis(500));
                let check_process = Command::new("tasklist")
                    .args(["/FI", &format!("PID eq {}", pid), "/NH"])
                    .output();
                
                match check_process {
                    Ok(check_output) => {
                        let output_str = String::from_utf8_lossy(&check_output.stdout);
                        if !output_str.contains(&pid) {
                            println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º", pid);
                            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                            let _ = app_handle.emit_to("main", "port-closed", &pid);
                            return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç", pid));
                        } else {
                            println!("[Ports] ‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–≤–Ω—é 2");
                        }
                    },
                    Err(_) => {
                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—Ö
                        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                        let _ = app_handle.emit_to("main", "port-closed", &pid);
                        return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç", pid));
                    }
                }
            },
            _ => {
                println!("[Ports] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–≤–Ω—é 2");
            }
        }
        
        // –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        println!("[Ports] üîç –£—Ä–æ–≤–µ–Ω—å 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞");
        let force_close = if cfg!(target_os = "windows") {
            Command::new("taskkill")
                .args(["/F", "/PID", &pid])
                .output()
        } else {
            Command::new("kill")
                .args(["-9", &pid])
                .output()
        };
        
        match force_close {
            Ok(output) if output.status.success() => {
                println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç", pid);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω
                std::thread::sleep(std::time::Duration::from_millis(500));
                let check_process = Command::new("tasklist")
                    .args(["/FI", &format!("PID eq {}", pid), "/NH"])
                    .output();
                
                match check_process {
                    Ok(check_output) => {
                        let output_str = String::from_utf8_lossy(&check_output.stdout);
                        if !output_str.contains(&pid) {
                            println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç", pid);
                            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                            let _ = app_handle.emit_to("main", "port-closed", &pid);
                            return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç", pid));
                        } else {
                            println!("[Ports] ‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–≤–Ω—é 3");
                        }
                    },
                    Err(_) => {
                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—Ö
                        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                        let _ = app_handle.emit_to("main", "port-closed", &pid);
                        return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç", pid));
                    }
                }
            },
            _ => {
                println!("[Ports] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–≤–Ω—é 3");
            }
        }
        
        // –£—Ä–æ–≤–µ–Ω—å 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
        println!("[Ports] üîç –£—Ä–æ–≤–µ–Ω—å 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–º–µ—Å—Ç–µ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏");
        let tree_close = if cfg!(target_os = "windows") {
            Command::new("taskkill")
                .args(["/F", "/PID", &pid, "/T"])
                .output()
        } else {
            // –î–ª—è Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            let _pkill_cmd = Command::new("pkill")
                .args(["-TERM", "-P", &pid])
                .output();
            
            // –ó–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            Command::new("kill")
                .args(["-9", &pid])
                .output()
        };
        
        match tree_close {
            Ok(output) if output.status.success() => {
                println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –≤–º–µ—Å—Ç–µ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏", pid);
                
                // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                std::thread::sleep(std::time::Duration::from_millis(500));
                let check_process = Command::new("tasklist")
                    .args(["/FI", &format!("PID eq {}", pid), "/NH"])
                    .output();
                
                match check_process {
                    Ok(check_output) => {
                        let output_str = String::from_utf8_lossy(&check_output.stdout);
                        if !output_str.contains(&pid) {
                            println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –≤–º–µ—Å—Ç–µ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏", pid);
                            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                            let _ = app_handle.emit_to("main", "port-closed", &pid);
                            return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –≤–º–µ—Å—Ç–µ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏", pid));
                        } else {
                            println!("[Ports] ‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–≤–Ω—é 4");
                        }
                    },
                    Err(_) => {
                        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—Ö
                        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                        let _ = app_handle.emit_to("main", "port-closed", &pid);
                        return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –≤–º–µ—Å—Ç–µ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏", pid));
                    }
                }
            },
            _ => {
                println!("[Ports] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤–º–µ—Å—Ç–µ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–≤–Ω—é 4");
            }
        }
        
        // –£—Ä–æ–≤–µ–Ω—å 4: PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows)
        if cfg!(target_os = "windows") {
            println!("[Ports] üîç –£—Ä–æ–≤–µ–Ω—å 4: PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏");
            
            let ps_cmd = format!(
                "Start-Process powershell -Verb RunAs -WindowStyle Hidden -ArgumentList '-Command \"Stop-Process -Id {} -Force -ErrorAction SilentlyContinue\"'", 
                pid
            );
            
            let elevated_close = Command::new("powershell")
                .args(["-Command", &ps_cmd])
                .output();
            
            match elevated_close {
                Ok(_) => {
                    // –î–∞–µ–º –≤—Ä–µ–º—è PowerShell –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
                    println!("[Ports] PowerShell –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è");
                    std::thread::sleep(std::time::Duration::from_millis(1000));
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                    let check_process = Command::new("tasklist")
                        .args(["/FI", &format!("PID eq {}", pid), "/NH"])
                        .output();
                    
                    match check_process {
                        Ok(check_output) => {
                            let output_str = String::from_utf8_lossy(&check_output.stdout);
                            if !output_str.contains(&pid) {
                                println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏", pid);
                                // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                                let _ = app_handle.emit_to("main", "port-closed", &pid);
                                return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏", pid));
                            } else {
                                println!("[Ports] ‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Ä–æ–≤–Ω—é 5");
                            }
                        },
                        Err(_) => {
                            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                            let _ = app_handle.emit_to("main", "port-closed", &pid);
                            return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏", pid));
                        }
                    }
                },
                Err(e) => {
                    println!("[Ports] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ PowerShell: {}", e);
                }
            }
            
            // –£—Ä–æ–≤–µ–Ω—å 5: WMI (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows)
            println!("[Ports] üîç –£—Ä–æ–≤–µ–Ω—å 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WMI");
            
            let wmi_cmd = format!(
                "(Get-WmiObject Win32_Process -Filter \"ProcessId = {}\").Terminate()", 
                pid
            );
            
            let wmi_close = Command::new("powershell")
                .args(["-Command", &wmi_cmd])
                .output();
            
            match wmi_close {
                Ok(_) => {
                    // –î–∞–µ–º –≤—Ä–µ–º—è PowerShell –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
                    std::thread::sleep(std::time::Duration::from_millis(1000));
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                    let check_process = Command::new("tasklist")
                        .args(["/FI", &format!("PID eq {}", pid), "/NH"])
                        .output();
                    
                    match check_process {
                        Ok(check_output) => {
                            let output_str = String::from_utf8_lossy(&check_output.stdout);
                            if !output_str.contains(&pid) {
                                println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ WMI", pid);
                                // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                                let _ = app_handle.emit_to("main", "port-closed", &pid);
                                return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ WMI", pid));
                            } else {
                                println!("[Ports] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏");
                            }
                        },
                        Err(_) => {
                            // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                            let _ = app_handle.emit_to("main", "port-closed", &pid);
                            return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ WMI", pid));
                        }
                    }
                },
                Err(e) => {
                    println!("[Ports] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ WMI: {}", e);
                }
            }
        }
        
        let error = format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid} –¥–∞–∂–µ –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã");
        println!("[Ports] ‚ùå {}", error);
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
        let _ = app_handle.emit_to("main", "port-close-error", &pid);
        Err(error)
    }).await.map_err(|e| {
        println!("[Ports] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏: {}", e);
        format!("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏: {}", e)
    })?
}

/// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
#[tauri::command]
pub async fn refresh_ports_command<R: Runtime>(
    app_handle: tauri::AppHandle<R>,
    detailed_logging: Option<bool>
) -> Result<String, String> {
    println!("[Ports] –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É, detailed_logging: {:?}", detailed_logging);
    
    if let Some(window) = app_handle.get_webview_window("main") {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –∫–æ–º–∞–Ω–¥—ã
        let window_handle = window.clone();
        thread::spawn(move || {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            println!("[Ports] –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ –∏–∑ refresh_ports_command");
            crate::ports::core::refresh_ports(window_handle, detailed_logging.unwrap_or(false));
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        println!("[Ports] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
        Ok("–°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω".to_string())
    } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–∫–Ω–æ
        let error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤".to_string();
        println!("[Ports] –û–®–ò–ë–ö–ê: {}", error_msg);
        Err(error_msg)
    }
}

/// –ó–∞–∫—Ä—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π TCP –ø–æ—Ä—Ç –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
/// 
/// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
/// * `pid` - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞
/// * `port` - –ù–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
/// * `protocol` - –ü—Ä–æ—Ç–æ–∫–æ–ª (TCP/UDP)
/// * `local_addr` - –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å (IP:port)
/// * `app_handle` - –•—ç–Ω–¥–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Tauri
#[tauri::command]
pub async fn close_specific_port<R: Runtime>(
    pid: String, 
    port: String,
    protocol: String,
    local_addr: String,
    app_handle: tauri::AppHandle<R>
) -> Result<String, String> {
    println!("[Ports] üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ {} (PID: {}, –ø—Ä–æ—Ç–æ–∫–æ–ª: {}, –∞–¥—Ä–µ—Å: {})", port, pid, protocol, local_addr);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    task::spawn_blocking(move || {
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        let process_name = if cfg!(target_os = "windows") {
            let output = Command::new("tasklist")
                .args(["/FI", &format!("PID eq {}", pid), "/FO", "CSV"])
                .output();
                
            if let Ok(output) = output {
                let output_str = String::from_utf8_lossy(&output.stdout);
                if let Some(line) = output_str.lines().skip(1).next() {
                    if let Some(index) = line.find(',') {
                        line[1..index-1].to_string()
                    } else {
                        "Unknown".to_string()
                    }
                } else {
                    "Unknown".to_string()
                }
            } else {
                "Unknown".to_string()
            }
        } else {
            let output = Command::new("ps")
                .args(["-p", &pid, "-o", "comm="])
                .output();
                
            if let Ok(output) = output {
                String::from_utf8_lossy(&output.stdout).trim().to_string()
            } else {
                "Unknown".to_string()
            }
        };
        
        println!("[Ports] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç {} –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {} (PID: {})", port, process_name, pid);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –æ—Å–æ–±—ã–º (Steam, –∏–≥—Ä–∞ –∏ —Ç.–¥.)
        let is_special_process = process_name.to_lowercase().contains("steam") || 
                                process_name.to_lowercase().contains("game") || 
                                process_name.to_lowercase().contains("epic") || 
                                process_name.to_lowercase().contains("battle.net");
        
        if is_special_process {
            println!("[Ports] ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å ({}), —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–æ–±—ã–π –ø–æ–¥—Ö–æ–¥", process_name);
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        let close_result = if cfg!(target_os = "windows") {
            // –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É netsh –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
            let _ip_address = local_addr.split(':').next().unwrap_or("0.0.0.0");
            
            if protocol.to_uppercase() == "TCP" {
                // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
                println!("[Ports] üîç –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å TCP –ø–æ—Ä—Ç —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏");
                
                // –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É PowerShell –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                let ps_command = format!(
                    "Stop-Process -Id {} -Force", 
                    pid
                );
                
                // –ó–∞–ø—É—Å–∫ PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
                let elevated_output = Command::new("powershell")
                    .args([
                        "-Command", 
                        &format!("Start-Process powershell -Verb RunAs -WindowStyle Hidden -ArgumentList '-Command \"{}\"'", ps_command)
                    ])
                    .output();
                
                match elevated_output {
                    Ok(output) => {
                        let stdout = String::from_utf8_lossy(&output.stdout);
                        let stderr = String::from_utf8_lossy(&output.stderr);
                        
                        if !stdout.is_empty() {
                            println!("[Ports] PowerShell stdout: {}", stdout);
                        }
                        
                        if !stderr.is_empty() {
                            println!("[Ports] PowerShell stderr: {}", stderr);
                        }
                        
                        if output.status.success() {
                            println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π", pid);
                            
                            // –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–µ–º, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—É –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
                            std::thread::sleep(std::time::Duration::from_millis(500));
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
                            let check_process = Command::new("tasklist")
                                .args(["/FI", &format!("PID eq {}", pid), "/NH"])
                                .output();
                                
                            match check_process {
                                Ok(check_output) => {
                                    let output_str = String::from_utf8_lossy(&check_output.stdout);
                                    if !output_str.contains(&pid) {
                                        println!("[Ports] ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞: –ø—Ä–æ—Ü–µ—Å—Å {} –∑–∞–≤–µ—Ä—à–µ–Ω", pid);
                                        return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏", process_name));
                                    } else {
                                        println!("[Ports] ‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –≤—Å—ë –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã");
                                    }
                                },
                                Err(e) => {
                                    println!("[Ports] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {}", e);
                                }
                            }
                        } else {
                            println!("[Ports] ‚ö†Ô∏è PowerShell –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ, –∫–æ–¥: {:?}", output.status.code());
                        }
                    },
                    Err(e) => {
                        println!("[Ports] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ PowerShell: {}", e);
                    }
                }
                
                // –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å emergency_kill_process
                if is_special_process {
                    println!("[Ports] üî• –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ {} –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", process_name);
                    
                    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Ñ—É–Ω–∫—Ü–∏—é emergency_kill_process –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    // –ó–¥–µ—Å—å –º—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –±–ª–æ–∫–µ
                    let pid_clone = pid.clone();
                    // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await,
                    // –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É taskkill —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    println!("[Ports] üî• –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è {}", process_name);
                    
                    let force_kill_result = Command::new("taskkill")
                        .args(["/F", "/PID", &pid_clone, "/T"])
                        .output();
                    
                    match force_kill_result {
                        Ok(output) => {
                            let stdout = String::from_utf8_lossy(&output.stdout);
                            let stderr = String::from_utf8_lossy(&output.stderr);
                            
                            if !stdout.is_empty() {
                                println!("[Ports] Taskkill stdout: {}", stdout);
                            }
                            
                            if !stderr.is_empty() {
                                println!("[Ports] Taskkill stderr: {}", stderr);
                            }
                            
                            if output.status.success() {
                                println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ taskkill", pid_clone);
                                return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ taskkill", process_name));
                            } else {
                                println!("[Ports] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ taskkill, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏");
                            }
                        },
                        Err(e) => {
                            println!("[Ports] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ taskkill: {}", e);
                        }
                    }
                }
                
                // –ü—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ netsh
                println!("[Ports] üîç –ü—Ä–æ–±—É–µ–º –∑–∞–∫—Ä—ã—Ç—å TCP –ø–æ—Ä—Ç {} —á–µ—Ä–µ–∑ netsh", port);
                let output = Command::new("cmd")
                    .args(["/c", &format!("netsh interface ipv4 delete tcpconnection {} {} {} {}", 
                                         local_addr, "0.0.0.0:0", protocol.to_lowercase(), pid)])
                    .output();
                
                match output {
                    Ok(output) => {
                        let stdout = String::from_utf8_lossy(&output.stdout);
                        let stderr = String::from_utf8_lossy(&output.stderr);
                        
                        if !stdout.is_empty() {
                            println!("[Ports] netsh stdout: {}", stdout);
                        }
                        
                        if !stderr.is_empty() {
                            println!("[Ports] netsh stderr: {}", stderr);
                        }
                        
                        if output.status.success() {
                            println!("[Ports] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç TCP –ø–æ—Ä—Ç {} –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {}", port, pid);
                            Ok(format!("–£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç –ø–æ—Ä—Ç {} –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {}", port, process_name))
                        } else {
                            println!("[Ports] ‚ö†Ô∏è netsh –Ω–µ —Å–º–æ–≥ –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç, –∫–æ–¥: {:?}", output.status.code());
                            
                            // –ï—Å–ª–∏ netsh –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º taskkill —Å —Ñ–ª–∞–≥–æ–º /F
                            println!("[Ports] üîç –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ netsh, –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å");
                            
                            // –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º elevated —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ PowerShell
                            let force_close = Command::new("cmd")
                                .args(["/c", &format!("taskkill /F /PID {} /T", pid)])
                                .output();
                            
                            match force_close {
                                Ok(output) => {
                                    let stdout = String::from_utf8_lossy(&output.stdout);
                                    let stderr = String::from_utf8_lossy(&output.stderr);
                                    
                                    if !stdout.is_empty() {
                                        println!("[Ports] taskkill stdout: {}", stdout);
                                    }
                                    
                                    if !stderr.is_empty() {
                                        println!("[Ports] taskkill stderr: {}", stderr);
                                    }
                                    
                                    if output.status.success() {
                                        println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ {}", pid, port);
                                        Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ {}", process_name, port))
                                    } else {
                                        println!("[Ports] ‚ö†Ô∏è taskkill –Ω–µ —Å–º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ–¥: {:?}", output.status.code());
                                        
                                        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç—å taskkill —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
                                        println!("[Ports] üîç –ü—Ä–æ–±—É–µ–º taskkill —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏");
                                        let elevated_cmd = format!(
                                            "Start-Process -FilePath \"taskkill\" -ArgumentList \"/F /PID {} /T\" -Verb RunAs -WindowStyle Hidden", 
                                            pid
                                        );
                                        
                                        let final_attempt = Command::new("powershell")
                                            .args(["-Command", &elevated_cmd])
                                            .output();
                                            
                                        match final_attempt {
                                            Ok(output) => {
                                                let stdout = String::from_utf8_lossy(&output.stdout);
                                                let stderr = String::from_utf8_lossy(&output.stderr);
                                                
                                                if !stdout.is_empty() {
                                                    println!("[Ports] elevated taskkill stdout: {}", stdout);
                                                }
                                                
                                                if !stderr.is_empty() {
                                                    println!("[Ports] elevated taskkill stderr: {}", stderr);
                                                }
                                                
                                                // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
                                                std::thread::sleep(std::time::Duration::from_millis(1000));
                                                
                                                println!("[Ports] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏");
                                                Ok(format!("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {} —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏", process_name))
                                            },
                                            Err(e) => {
                                                let error = format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç {} –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {}: {}", port, process_name, e);
                                                println!("[Ports] ‚ùå {}", error);
                                                Err(error)
                                            }
                                        }
                                    }
                                },
                                Err(e) => {
                                    let error = format!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ taskkill: {}", e);
                                    println!("[Ports] ‚ùå {}", error);
                                    Err(error)
                                }
                            }
                        }
                    },
                    Err(e) => {
                        println!("[Ports] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã netsh: {}", e);
                        
                        // –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                        println!("[Ports] üîç –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å taskkill");
                        let force_close = Command::new("taskkill")
                            .args(["/F", "/PID", &pid, "/T"])
                            .output();
                            
                        match force_close {
                            Ok(output) => {
                                let stdout = String::from_utf8_lossy(&output.stdout);
                                let stderr = String::from_utf8_lossy(&output.stderr);
                                
                                if !stdout.is_empty() {
                                    println!("[Ports] taskkill stdout: {}", stdout);
                                }
                                
                                if !stderr.is_empty() {
                                    println!("[Ports] taskkill stderr: {}", stderr);
                                }
                                
                                if output.status.success() {
                                    println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç", pid);
                                    Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ {}", process_name, port))
                                } else {
                                    println!("[Ports] ‚ö†Ô∏è taskkill –Ω–µ —Å–º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ–¥: {:?}", output.status.code());
                                    
                                    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç—å taskkill —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
                                    println!("[Ports] üîç –ü—Ä–æ–±—É–µ–º taskkill —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏");
                                    let elevated_cmd = format!(
                                        "Start-Process -FilePath \"taskkill\" -ArgumentList \"/F /PID {} /T\" -Verb RunAs -WindowStyle Hidden", 
                                        pid
                                    );
                                    
                                    let final_attempt = Command::new("powershell")
                                        .args(["-Command", &elevated_cmd])
                                        .output();
                                        
                                    match final_attempt {
                                        Ok(_) => {
                                            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
                                            std::thread::sleep(std::time::Duration::from_millis(1000));
                                            
                                            println!("[Ports] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏");
                                            Ok(format!("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {} —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏", process_name))
                                        },
                                        Err(e) => {
                                            let error = format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç {} –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {}: {}", port, process_name, e);
                                            println!("[Ports] ‚ùå {}", error);
                                            Err(error)
                                        }
                                    }
                                }
                            },
                            Err(e) => {
                                let error = format!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ taskkill: {}", e);
                                println!("[Ports] ‚ùå {}", error);
                                Err(error)
                            }
                        }
                    }
                }
            } else {
                // –î–ª—è UDP –≤ Windows –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                println!("[Ports] üîç –ó–∞–∫—Ä—ã—Ç–∏–µ UDP –ø–æ—Ä—Ç–æ–≤ –≤ Windows –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å");
                let force_close = Command::new("taskkill")
                    .args(["/PID", &pid, "/F"])
                    .output();
                
                match force_close {
                    Ok(output) => {
                        let stdout = String::from_utf8_lossy(&output.stdout);
                        let stderr = String::from_utf8_lossy(&output.stderr);
                        
                        if !stdout.is_empty() {
                            println!("[Ports] taskkill stdout: {}", stdout);
                        }
                        
                        if !stderr.is_empty() {
                            println!("[Ports] taskkill stderr: {}", stderr);
                        }
                        
                        if output.status.success() {
                            println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è UDP –ø–æ—Ä—Ç–∞ {}", pid, port);
                            Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è UDP –ø–æ—Ä—Ç–∞ {}", process_name, port))
                        } else {
                            let error = format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å UDP –ø–æ—Ä—Ç {} –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {}", port, process_name);
                            println!("[Ports] ‚ùå {}", error);
                            Err(error)
                        }
                    },
                    Err(e) => {
                        let error = format!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ taskkill: {}", e);
                        println!("[Ports] ‚ùå {}", error);
                        Err(error)
                    }
                }
            }
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            println!("[Ports] üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞");
            let kill_cmd = Command::new("kill")
                .args(["-9", &pid])
                .output();
            
            match kill_cmd {
                Ok(output) => {
                    if output.status.success() {
                        println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç", pid);
                        Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ {}", process_name, port))
                    } else {
                        let error = format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç {} –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {}", port, process_name);
                        println!("[Ports] ‚ùå {}", error);
                        Err(error)
                    }
                },
                Err(e) => {
                    let error = format!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ kill: {}", e);
                    println!("[Ports] ‚ùå {}", error);
                    Err(error)
                }
            }
        };
        
        // –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        match &close_result {
            Ok(message) => {
                // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                println!("[Ports] ‚úÖ –ü–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç: {}", message);
                let port_info = format!("{}:{}", pid, port);
                let _ = app_handle.emit_to("main", "port-closed", &port_info);
            },
            Err(error) => {
                // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
                println!("[Ports] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞: {}", error);
                let port_info = format!("{}:{}", pid, port);
                let _ = app_handle.emit_to("main", "port-close-error", &port_info);
            }
        }
        
        close_result
    }).await.map_err(|e| {
        println!("[Ports] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏: {}", e);
        format!("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏: {}", e)
    })?
}

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
#[tauri::command]
pub async fn can_close_port_individually(
    protocol: String,
    local_addr: String
) -> Result<bool, String> {
    println!("[Ports] –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ {} –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ", local_addr);
    
    // –ù–∞ Windows TCP-–ø–æ—Ä—Ç—ã –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ netsh
    if cfg!(target_os = "windows") && protocol.to_uppercase() == "TCP" {
        return Ok(true);
    }
    
    // –ù–∞ Linux –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å TCP-–ø–æ—Ä—Ç—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ fuser
    if cfg!(target_os = "linux") && protocol.to_uppercase() == "TCP" {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Ç–∏–ª–∏—Ç—ã fuser
        let output = Command::new("which")
            .args(["fuser"])
            .output();
        
        match output {
            Ok(output) if output.status.success() => {
                println!("[Ports] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Ç–∏–ª–∏—Ç–∞ fuser, –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ");
                return Ok(true);
            },
            _ => {
                println!("[Ports] –£—Ç–∏–ª–∏—Ç–∞ fuser –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
                return Ok(false);
            }
        }
    }
    
    // –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö (UDP, macOS, –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã) –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    println!("[Ports] –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    Ok(false)
}

/// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ Windows —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
#[tauri::command]
pub async fn force_kill_process(pid: String) -> Result<String, String> {
    if !cfg!(target_os = "windows") {
        return Err("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Windows".to_string());
    }

    println!("[Ports] –ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID: {}", pid);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Win32 API
    let pid_u32 = match pid.parse::<u32>() {
        Ok(p) => p,
        Err(_) => return Err(format!("–ù–µ–≤–µ—Ä–Ω—ã–π PID: {}", pid))
    };
    
    // –ü—Ä–æ–±—É–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ WinAPI (—Å–∞–º—ã–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
    #[cfg(target_os = "windows")]
    {
        use std::ptr;
        use winapi::um::processthreadsapi::{OpenProcess, TerminateProcess};
        use winapi::um::winnt::{PROCESS_TERMINATE, PROCESS_QUERY_INFORMATION, PROCESS_VM_READ, HANDLE};
        use winapi::um::handleapi::CloseHandle;
        
        println!("[Ports] –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ WinAPI –¥–ª—è PID: {}", pid_u32);
        
        unsafe {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            let process_handle: HANDLE = OpenProcess(
                PROCESS_TERMINATE | PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, 
                0, 
                pid_u32
            );
            
            if process_handle == ptr::null_mut() {
                println!("[Ports] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ WinAPI, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏");
            } else {
                // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                let result = TerminateProcess(process_handle, 0);
                CloseHandle(process_handle);
                
                if result != 0 {
                    println!("[Ports] –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ WinAPI");
                    return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å —Å PID {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ WinAPI", pid));
                } else {
                    println!("[Ports] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ WinAPI, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏");
                }
            }
        }
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞—Ç–Ω–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
    let temp_dir = std::env::temp_dir();
    let batch_path = temp_dir.join(format!("kill_process_{}.bat", pid));
    let ps_path = temp_dir.join(format!("kill_process_{}.ps1", pid));

    // –°–æ–∑–¥–∞–µ–º PowerShell —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    let ps_script = format!(
        r#"
        # PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        Write-Host "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID: {pid}"
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        function Test-ProcessExists {{
            param($id)
            $process = Get-Process -Id $id -ErrorAction SilentlyContinue
            return ($null -ne $process)
        }}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        $processName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        try {{
            $processInfo = Get-Process -Id {pid} -ErrorAction SilentlyContinue
            if ($processInfo) {{
                $processName = $processInfo.ProcessName
                Write-Host "–¶–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å: $processName (PID: {pid})"
            }}
        }} catch {{
            Write-Host "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: $_"
        }}
        
        # –ú–µ—Ç–æ–¥ 1: —á–µ—Ä–µ–∑ Stop-Process
        try {{
            Stop-Process -Id {pid} -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 1
            if (-not (Test-ProcessExists -id {pid})) {{
                Write-Host "–ú–µ—Ç–æ–¥ 1: –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ Stop-Process"
                exit 0
            }} else {{
                Write-Host "–ú–µ—Ç–æ–¥ 1: Stop-Process –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—Ü–µ—Å—Å"
            }}
        }} catch {{
            Write-Host "–ú–µ—Ç–æ–¥ 1 –Ω–µ —É–¥–∞–ª—Å—è: $_"
        }}
        
        # –ú–µ—Ç–æ–¥ 2: —á–µ—Ä–µ–∑ taskkill (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏)
        try {{
            taskkill /F /PID {pid} /T
            Start-Sleep -Seconds 1
            if (-not (Test-ProcessExists -id {pid})) {{
                Write-Host "–ú–µ—Ç–æ–¥ 2: –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ taskkill /F /T"
                exit 0
            }} else {{
                Write-Host "–ú–µ—Ç–æ–¥ 2: taskkill –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—Ü–µ—Å—Å"
            }}
        }} catch {{
            Write-Host "–ú–µ—Ç–æ–¥ 2 –Ω–µ —É–¥–∞–ª—Å—è: $_"
        }}

        # –ú–µ—Ç–æ–¥ 3: —á–µ—Ä–µ–∑ WMI
        try {{
            $process = Get-WmiObject Win32_Process -Filter "ProcessId = {pid}"
            if ($process) {{
                $result = $process.Terminate()
                Start-Sleep -Seconds 1
                if (-not (Test-ProcessExists -id {pid})) {{
                    Write-Host "–ú–µ—Ç–æ–¥ 3: –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ WMI: $result"
                    exit 0
                }} else {{
                    Write-Host "–ú–µ—Ç–æ–¥ 3: WMI –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—Ü–µ—Å—Å"
                }}
            }} else {{
                Write-Host "–ú–µ—Ç–æ–¥ 3: –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ WMI"
            }}
        }} catch {{
            Write-Host "–ú–µ—Ç–æ–¥ 3 –Ω–µ —É–¥–∞–ª—Å—è: $_"
        }}
        
        # –ú–µ—Ç–æ–¥ 4: Direct API Call (—Å–∞–º—ã–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)
        Write-Host "–ú–µ—Ç–æ–¥ 4: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π Win32 API –≤—ã–∑–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"
        Add-Type -TypeDefinition @"
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.ComponentModel;
public class AdvancedProcessKiller {{
    [Flags]
    public enum ProcessAccessFlags : uint
    {{
        All = 0x001F0FFF,
        Terminate = 0x00000001,
        CreateThread = 0x00000002,
        VirtualMemoryOperation = 0x00000008,
        VirtualMemoryRead = 0x00000010,
        VirtualMemoryWrite = 0x00000020,
        DuplicateHandle = 0x00000040,
        QueryInformation = 0x00000400,
        SetInformation = 0x00000200,
        Synchronize = 0x00100000
    }}
    
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr OpenProcess(ProcessAccessFlags dwDesiredAccess, bool bInheritHandle, uint dwProcessId);
    
    [DllImport("kernel32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool TerminateProcess(IntPtr hProcess, uint uExitCode);
    
    [DllImport("kernel32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool CloseHandle(IntPtr hObject);
    
    [DllImport("ntdll.dll")]
    public static extern uint NtTerminateProcess(IntPtr hProcess, uint uExitCode);
    
    [DllImport("ntdll.dll")]
    public static extern uint NtSuspendProcess(IntPtr hProcess);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤
    public static bool ForceKillProcess(uint processId) {{
        IntPtr hProcess = OpenProcess(ProcessAccessFlags.All, false, processId);
        if (hProcess == IntPtr.Zero) {{
            throw new Win32Exception(Marshal.GetLastWin32Error(), "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å");
        }}
        
        try {{
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
            NtSuspendProcess(hProcess);
            
            // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API
            bool terminated = TerminateProcess(hProcess, 0);
            if (!terminated) {{
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π NT API
                uint ntStatus = NtTerminateProcess(hProcess, 0);
                return ntStatus == 0;
            }}
            return terminated;
        }}
        finally {{
            CloseHandle(hProcess);
        }}
    }}
}}
"@
        try {{
            $result = [AdvancedProcessKiller]::ForceKillProcess([uint32]{pid})
            Start-Sleep -Seconds 1
            if (-not (Test-ProcessExists -id {pid})) {{
                Write-Host "–ú–µ—Ç–æ–¥ 4: –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤"
                exit 0
            }} else {{
                Write-Host "–ú–µ—Ç–æ–¥ 4: –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ –Ω–µ —Å–º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
            }}
        }} catch {{
            Write-Host "–ú–µ—Ç–æ–¥ 4 –Ω–µ —É–¥–∞–ª—Å—è: $_"
        }}
        
        # –ú–µ—Ç–æ–¥ 5: –û—Å–æ–±—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è Steam (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
        if ($processName -like "*steam*") {{
            Write-Host "–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å Steam, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ—Å–æ–±—ã–π –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            try {{
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Steam
                $steamProcesses = Get-WmiObject Win32_Process | Where-Object {{ $_.Name -like "*steam*" -and $_.ProcessId -ne [int]{pid} }}
                foreach ($proc in $steamProcesses) {{
                    Write-Host "–ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å Steam: $($proc.ProcessId)"
                    taskkill /F /PID $proc.ProcessId
                }}
                Start-Sleep -Seconds 1
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
                taskkill /F /PID {pid}
                Start-Sleep -Seconds 1
                
                if (-not (Test-ProcessExists -id {pid})) {{
                    Write-Host "–ú–µ—Ç–æ–¥ 5: –ø—Ä–æ—Ü–µ—Å—Å Steam —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥"
                    exit 0
                }}
            }} catch {{
                Write-Host "–ú–µ—Ç–æ–¥ 5 –Ω–µ —É–¥–∞–ª—Å—è: $_"
            }}
        }}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        Start-Sleep -Seconds 1
        $finalCheck = Get-Process -Id {pid} -ErrorAction SilentlyContinue
        if($finalCheck) {{
            Write-Host "–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid} –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫"
            exit 1
        }} else {{
            Write-Host "–£–°–ü–ï–•: –ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–µ—Ä—à–µ–Ω –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤"
            exit 0
        }}
        "#
    );

    // –°–æ–∑–¥–∞–µ–º –±–∞—Ç–Ω–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
    let batch_script = format!(
        r#"@echo off
        echo –ó–∞–ø—É—Å–∫ PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}...
        powershell -Command "Start-Process powershell -ArgumentList '-ExecutionPolicy Bypass -File \"{}\"' -Verb RunAs -WindowStyle Hidden -Wait"
        if errorlevel 1 (
            echo –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ PowerShell —Å–∫—Ä–∏–ø—Ç–∞
            exit /b 1
        ) else (
            echo –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
            exit /b 0
        )
        "#,
        ps_path.to_string_lossy()
    );

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –≤ —Ñ–∞–π–ª—ã
    match std::fs::write(&ps_path, ps_script) {
        Ok(_) => println!("[Ports] PowerShell —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {}", ps_path.to_string_lossy()),
        Err(e) => return Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PowerShell —Å–∫—Ä–∏–ø—Ç: {}", e)),
    }

    match std::fs::write(&batch_path, batch_script) {
        Ok(_) => println!("[Ports] Batch —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {}", batch_path.to_string_lossy()),
        Err(e) => return Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Batch —Å–∫—Ä–∏–ø—Ç: {}", e)),
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ç–Ω–∏–∫
    match Command::new("cmd")
        .args(["/c", &batch_path.to_string_lossy().to_string()])
        .output() 
    {
        Ok(output) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if output.status.success() {
                println!("[Ports] –ü—Ä–æ—Ü–µ—Å—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", pid);
                
                // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                let _ = std::fs::remove_file(&ps_path);
                let _ = std::fs::remove_file(&batch_path);
                
                Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å —Å PID {} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", pid))
            } else {
                let stderr = String::from_utf8_lossy(&output.stderr);
                let stdout = String::from_utf8_lossy(&output.stdout);
                println!("[Ports] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {}. Stdout: {}, Stderr: {}", pid, stdout, stderr);
                
                // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                let _ = std::fs::remove_file(&ps_path);
                let _ = std::fs::remove_file(&batch_path);
                
                Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {}. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", pid))
            }
        },
        Err(e) => {
            // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            let _ = std::fs::remove_file(&ps_path);
            let _ = std::fs::remove_file(&batch_path);
            
            Err(format!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞: {}", e))
        }
    }
}

/// –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ –æ–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
#[tauri::command]
pub async fn emergency_kill_process(pid: String) -> Result<String, String> {
    if !cfg!(target_os = "windows") {
        return Err("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Windows".to_string());
    }

    println!("[Ports] üî• –≠–ö–°–¢–†–ï–ù–ù–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID: {}", pid);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PID –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    let pid_u32 = match pid.parse::<u32>() {
        Ok(p) => p,
        Err(_) => {
            println!("[Ports] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PID: {}", pid);
            return Err(format!("–ù–µ–≤–µ—Ä–Ω—ã–π PID: {}", pid))
        }
    };

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let process_name = if cfg!(target_os = "windows") {
        let output = Command::new("tasklist")
            .args(["/FI", &format!("PID eq {}", pid), "/FO", "CSV"])
            .output();
            
        if let Ok(output) = output {
            let output_str = String::from_utf8_lossy(&output.stdout);
            if let Some(line) = output_str.lines().skip(1).next() {
                if let Some(index) = line.find(',') {
                    line[1..index-1].to_string()
                } else {
                    "Unknown".to_string()
                }
            } else {
                "Unknown".to_string()
            }
        } else {
            "Unknown".to_string()
        }
    } else {
        "Unknown".to_string()
    };
    
    println!("[Ports] üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {} (PID: {})", process_name, pid);

    // 1. –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WinAPI –Ω–∞–ø—Ä—è–º—É—é
    #[cfg(target_os = "windows")]
    {
        use std::ptr;
        use winapi::um::processthreadsapi::{OpenProcess, TerminateProcess};
        use winapi::um::winnt::{PROCESS_TERMINATE, PROCESS_QUERY_INFORMATION, PROCESS_VM_READ, HANDLE};
        use winapi::um::handleapi::CloseHandle;
        
        println!("[Ports] üîç –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ WinAPI –¥–ª—è PID: {}", pid_u32);
        
        unsafe {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            let process_handle: HANDLE = OpenProcess(
                PROCESS_TERMINATE | PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, 
                0, 
                pid_u32
            );
            
            if process_handle == ptr::null_mut() {
                let error = std::io::Error::last_os_error();
                println!("[Ports] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ WinAPI: {:?}", error);
            } else {
                // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                let result = TerminateProcess(process_handle, 0);
                CloseHandle(process_handle);
                
                if result != 0 {
                    println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ WinAPI");
                    return Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å —Å PID {} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ WinAPI", pid));
                } else {
                    let error = std::io::Error::last_os_error();
                    println!("[Ports] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ WinAPI: {:?}", error);
                }
            }
        }
    }

    println!("[Ports] üîç WinAPI –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º PowerShell —Å–∫—Ä–∏–ø—Ç—ã");

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞—Ç–Ω–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
    let temp_dir = std::env::temp_dir();
    let batch_path = temp_dir.join(format!("kill_process_{}.bat", pid));
    let ps_path = temp_dir.join(format!("kill_process_{}.ps1", pid));

    // –°–æ–∑–¥–∞–µ–º PowerShell —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    let ps_script = format!(
        r#"
        # PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        Write-Host "[Ports] üîç PowerShell: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID: {pid}"
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        function Test-ProcessExists {{
            param($id)
            $process = Get-Process -Id $id -ErrorAction SilentlyContinue
            return ($null -ne $process)
        }}
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        $processName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        try {{
            $processInfo = Get-Process -Id {pid} -ErrorAction SilentlyContinue
            if ($processInfo) {{
                $processName = $processInfo.ProcessName
                Write-Host "[Ports] üîç PowerShell: –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å: $processName (PID: {pid})"
            }}
        }} catch {{
            Write-Host "[Ports] ‚ùå PowerShell: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: $_"
        }}
        
        # –ú–µ—Ç–æ–¥ 1: —á–µ—Ä–µ–∑ Stop-Process
        try {{
            Write-Host "[Ports] üîç PowerShell: –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ 1 - Stop-Process"
            Stop-Process -Id {pid} -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 1
            if (-not (Test-ProcessExists -id {pid})) {{
                Write-Host "[Ports] ‚úÖ PowerShell: –ú–µ—Ç–æ–¥ 1: –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ Stop-Process"
                exit 0
            }} else {{
                Write-Host "[Ports] ‚ùå PowerShell: –ú–µ—Ç–æ–¥ 1: Stop-Process –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—Ü–µ—Å—Å"
            }}
        }} catch {{
            Write-Host "[Ports] ‚ùå PowerShell: –ú–µ—Ç–æ–¥ 1 –Ω–µ —É–¥–∞–ª—Å—è: $_"
        }}
        
        # –ú–µ—Ç–æ–¥ 2: —á–µ—Ä–µ–∑ taskkill (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏)
        try {{
            Write-Host "[Ports] üîç PowerShell: –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ 2 - taskkill /F /T"
            taskkill /F /PID {pid} /T
            Start-Sleep -Seconds 1
            if (-not (Test-ProcessExists -id {pid})) {{
                Write-Host "[Ports] ‚úÖ PowerShell: –ú–µ—Ç–æ–¥ 2: –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ taskkill /F /T"
                exit 0
            }} else {{
                Write-Host "[Ports] ‚ùå PowerShell: –ú–µ—Ç–æ–¥ 2: taskkill –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—Ü–µ—Å—Å"
            }}
        }} catch {{
            Write-Host "[Ports] ‚ùå PowerShell: –ú–µ—Ç–æ–¥ 2 –Ω–µ —É–¥–∞–ª—Å—è: $_"
        }}

        # –ú–µ—Ç–æ–¥ 3: —á–µ—Ä–µ–∑ WMI
        try {{
            Write-Host "[Ports] üîç PowerShell: –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ 3 - WMI"
            $process = Get-WmiObject Win32_Process -Filter "ProcessId = {pid}"
            if ($process) {{
                $result = $process.Terminate()
                Start-Sleep -Seconds 1
                if (-not (Test-ProcessExists -id {pid})) {{
                    Write-Host "[Ports] ‚úÖ PowerShell: –ú–µ—Ç–æ–¥ 3: –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ WMI: $result"
                    exit 0
                }} else {{
                    Write-Host "[Ports] ‚ùå PowerShell: –ú–µ—Ç–æ–¥ 3: WMI –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ—Ü–µ—Å—Å"
                }}
            }} else {{
                Write-Host "[Ports] ‚ùå PowerShell: –ú–µ—Ç–æ–¥ 3: –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ WMI"
            }}
        }} catch {{
            Write-Host "[Ports] ‚ùå PowerShell: –ú–µ—Ç–æ–¥ 3 –Ω–µ —É–¥–∞–ª—Å—è: $_"
        }}
        
        # –ú–µ—Ç–æ–¥ 4: Direct API Call (—Å–∞–º—ã–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)
        Write-Host "[Ports] üîç PowerShell: –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ 4 - –ø—Ä—è–º–æ–π Win32 API –≤—ã–∑–æ–≤"
        Add-Type -TypeDefinition @"
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.ComponentModel;
public class AdvancedProcessKiller {{
    [Flags]
    public enum ProcessAccessFlags : uint
    {{
        All = 0x001F0FFF,
        Terminate = 0x00000001,
        CreateThread = 0x00000002,
        VirtualMemoryOperation = 0x00000008,
        VirtualMemoryRead = 0x00000010,
        VirtualMemoryWrite = 0x00000020,
        DuplicateHandle = 0x00000040,
        QueryInformation = 0x00000400,
        SetInformation = 0x00000200,
        Synchronize = 0x00100000
    }}
    
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr OpenProcess(ProcessAccessFlags dwDesiredAccess, bool bInheritHandle, uint dwProcessId);
    
    [DllImport("kernel32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool TerminateProcess(IntPtr hProcess, uint uExitCode);
    
    [DllImport("kernel32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool CloseHandle(IntPtr hObject);
    
    [DllImport("ntdll.dll")]
    public static extern uint NtTerminateProcess(IntPtr hProcess, uint uExitCode);
    
    [DllImport("ntdll.dll")]
    public static extern uint NtSuspendProcess(IntPtr hProcess);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤
    public static bool ForceKillProcess(uint processId) {{
        IntPtr hProcess = OpenProcess(ProcessAccessFlags.All, false, processId);
        if (hProcess == IntPtr.Zero) {{
            throw new Win32Exception(Marshal.GetLastWin32Error(), "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å");
        }}
        
        try {{
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
            NtSuspendProcess(hProcess);
            
            // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API
            bool terminated = TerminateProcess(hProcess, 0);
            if (!terminated) {{
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π NT API
                uint ntStatus = NtTerminateProcess(hProcess, 0);
                return ntStatus == 0;
            }}
            return terminated;
        }}
        finally {{
            CloseHandle(hProcess);
        }}
    }}
}}
"@
        try {{
            $result = [AdvancedProcessKiller]::ForceKillProcess([uint32]{pid})
            Start-Sleep -Seconds 1
            if (-not (Test-ProcessExists -id {pid})) {{
                Write-Host "[Ports] ‚úÖ PowerShell: –ú–µ—Ç–æ–¥ 4: –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤"
                exit 0
            }} else {{
                Write-Host "[Ports] ‚ùå PowerShell: –ú–µ—Ç–æ–¥ 4: –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ –Ω–µ —Å–º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
            }}
        }} catch {{
            Write-Host "[Ports] ‚ùå PowerShell: –ú–µ—Ç–æ–¥ 4 –Ω–µ —É–¥–∞–ª—Å—è: $_"
        }}
        
        # –ú–µ—Ç–æ–¥ 5: –û—Å–æ–±—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è Steam (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
        if ($processName -like "*steam*" -or $processName -like "*game*" -or $processName -like "*epic*") {{
            Write-Host "[Ports] üîç PowerShell: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ—Å–æ–±—ã–π –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
            try {{
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã 
                $childProcesses = Get-WmiObject Win32_Process | Where-Object {{ 
                    ($_.ParentProcessId -eq [int]{pid}) -or 
                    ($_.Name -like "*steam*" -and $_.ProcessId -ne [int]{pid}) -or
                    ($_.Name -like "*game*" -and $_.ProcessId -ne [int]{pid}) -or
                    ($_.Name -like "*epic*" -and $_.ProcessId -ne [int]{pid})
                }}
                
                if($childProcesses) {{
                    Write-Host "[Ports] üîç PowerShell: –ù–∞–π–¥–µ–Ω–æ $($childProcesses.Count) –¥–æ—á–µ—Ä–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
                    foreach ($proc in $childProcesses) {{
                        Write-Host "[Ports] üîç PowerShell: –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å: $($proc.ProcessId) ($($proc.Name))"
                        taskkill /F /PID $proc.ProcessId
                    }}
                    Start-Sleep -Seconds 1
                }}
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
                Write-Host "[Ports] üîç PowerShell: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å taskkill /F /PID {pid}"
                taskkill /F /PID {pid}
                Start-Sleep -Seconds 1
                
                if (-not (Test-ProcessExists -id {pid})) {{
                    Write-Host "[Ports] ‚úÖ PowerShell: –ú–µ—Ç–æ–¥ 5: –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥"
                    exit 0
                }} else {{
                    Write-Host "[Ports] ‚ùå PowerShell: –ú–µ—Ç–æ–¥ 5: —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –Ω–µ –ø–æ–º–æ–≥"
                }}
            }} catch {{
                Write-Host "[Ports] ‚ùå PowerShell: –ú–µ—Ç–æ–¥ 5 –Ω–µ —É–¥–∞–ª—Å—è: $_"
            }}
        }}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        Start-Sleep -Seconds 1
        $finalCheck = Get-Process -Id {pid} -ErrorAction SilentlyContinue
        if($finalCheck) {{
            Write-Host "[Ports] ‚ùå PowerShell: –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid} –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫"
            exit 1
        }} else {{
            Write-Host "[Ports] ‚úÖ PowerShell: –£–°–ü–ï–•: –ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–µ—Ä—à–µ–Ω –æ–¥–Ω–∏–º –∏–∑ –º–µ—Ç–æ–¥–æ–≤"
            exit 0
        }}
        "#
    );

    // –°–æ–∑–¥–∞–µ–º –±–∞—Ç–Ω–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
    let ps_path_str = ps_path.to_string_lossy();
    let batch_script = format!(
        r#"@echo off
        echo [Ports] üîç Batch: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID: {pid}
        
        REM –ü–æ–ø—ã—Ç–∫–∞ 1: taskkill —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å—é
        echo [Ports] üîç Batch: –ü–æ–ø—ã—Ç–∫–∞ 1 - taskkill /F /PID {pid} /T
        taskkill /F /PID {pid} /T
        
        REM –ü–æ–ø—ã—Ç–∫–∞ 2: wmic - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö, –≥–¥–µ taskkill –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
        echo [Ports] üîç Batch: –ü–æ–ø—ã—Ç–∫–∞ 2 - wmic process where processid="{pid}" call terminate
        wmic process where processid="{pid}" call terminate
        
        REM –ü–æ–ø—ã—Ç–∫–∞ 3: PowerShell —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
        echo [Ports] üîç Batch: –ü–æ–ø—ã—Ç–∫–∞ 3 - PowerShell —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
        powershell -Command "Start-Process powershell -ArgumentList '-Command \"Stop-Process -Id {pid} -Force\"' -Verb RunAs -WindowStyle Hidden"
        
        REM –ü–æ–ø—ã—Ç–∫–∞ 4: –ò—Å–ø–æ–ª—å–∑—É–µ–º PsKill –æ—Ç SysInternals –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if exist "%ProgramFiles%\SysInternals\pskill.exe" (
            echo [Ports] üîç Batch: –ü–æ–ø—ã—Ç–∫–∞ 4 - PsKill (SysInternals)
            "%ProgramFiles%\SysInternals\pskill.exe" -t {pid}
        ) else if exist "%ProgramFiles(x86)%\SysInternals\pskill.exe" (
            echo [Ports] üîç Batch: –ü–æ–ø—ã—Ç–∫–∞ 4 - PsKill (SysInternals x86)
            "%ProgramFiles(x86)%\SysInternals\pskill.exe" -t {pid}
        )
        
        REM –ü–æ–ø—ã—Ç–∫–∞ 5: –ó–∞–ø—É—Å–∫ —Å–ª–æ–∂–Ω–æ–≥–æ PowerShell —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏
        echo [Ports] üîç Batch: –ü–æ–ø—ã—Ç–∫–∞ 5 - –ó–∞–ø—É—Å–∫ —Å–ª–æ–∂–Ω–æ–≥–æ PowerShell —Å–∫—Ä–∏–ø—Ç–∞
        powershell -Command "Start-Process powershell -ArgumentList '-ExecutionPolicy Bypass -File \"{ps_path_str}\"' -Verb RunAs -WindowStyle Hidden -Wait"
        
        REM –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        timeout /t 2 > nul
        
        REM –ü—Ä–æ–≤–µ—Ä–∫–∞
        echo [Ports] üîç Batch: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        tasklist /FI "PID eq {pid}" /NH | find "{pid}" > nul
        if errorlevel 1 (
            echo [Ports] ‚úÖ Batch: –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
            exit /b 0
        ) else (
            echo [Ports] ‚ùå Batch: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
            exit /b 1
        )
        "#
    );

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –≤ —Ñ–∞–π–ª—ã
    match std::fs::write(&ps_path, ps_script) {
        Ok(_) => println!("[Ports] ‚úÖ PowerShell —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {}", ps_path.to_string_lossy()),
        Err(e) => {
            println!("[Ports] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PowerShell —Å–∫—Ä–∏–ø—Ç: {}", e);
            return Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PowerShell —Å–∫—Ä–∏–ø—Ç: {}", e))
        }
    }

    match std::fs::write(&batch_path, batch_script) {
        Ok(_) => println!("[Ports] ‚úÖ –ë–∞—Ç–Ω–∏–∫ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {}", batch_path.to_string_lossy()),
        Err(e) => {
            println!("[Ports] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞—Ç–Ω–∏–∫: {}", e);
            return Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞—Ç–Ω–∏–∫: {}", e))
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ç–Ω–∏–∫
    println!("[Ports] üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞—Ç–Ω–∏–∫ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è");
    match Command::new("cmd")
        .args(["/c", &batch_path.to_string_lossy().to_string()])
        .output() 
    {
        Ok(output) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            let stdout = String::from_utf8_lossy(&output.stdout);
            let stderr = String::from_utf8_lossy(&output.stderr);
            
            println!("[Ports] –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç–Ω–∏–∫–∞:");
            println!("[Ports] Stdout: {}", stdout);
            if !stderr.is_empty() {
                println!("[Ports] Stderr: {}", stderr);
            }
            
            if output.status.success() {
                println!("[Ports] ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ –±–∞—Ç–Ω–∏–∫", pid);
                
                // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                let _ = std::fs::remove_file(&ps_path);
                let _ = std::fs::remove_file(&batch_path);
                
                // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                let check_process = Command::new("tasklist")
                    .args(["/FI", &format!("PID eq {}", pid), "/NH"])
                    .output();
                
                match check_process {
                    Ok(check_output) => {
                        let check_output_str = String::from_utf8_lossy(&check_output.stdout);
                        if !check_output_str.contains(&pid) {
                            println!("[Ports] ‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {}", pid);
                        } else {
                            println!("[Ports] ‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ—Ü–µ—Å—Å {} –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", pid);
                        }
                    },
                    Err(e) => println!("[Ports] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: {}", e)
                }
                
                Ok(format!("–ü—Ä–æ—Ü–µ—Å—Å {} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", pid))
            } else {
                println!("[Ports] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {} —á–µ—Ä–µ–∑ –±–∞—Ç–Ω–∏–∫. –ö–æ–¥ –æ—à–∏–±–∫–∏: {:?}", pid, output.status.code());
                
                // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                let _ = std::fs::remove_file(&ps_path);
                let _ = std::fs::remove_file(&batch_path);
                
                Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {}. –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª.", pid))
            }
        },
        Err(e) => {
            println!("[Ports] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–∞—Ç–Ω–∏–∫–∞: {}", e);
            
            // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            let _ = std::fs::remove_file(&ps_path);
            let _ = std::fs::remove_file(&batch_path);
            
            Err(format!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {}", e))
        }
    }
} 